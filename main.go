package main

import (
	"encoding/hex"
	"fmt"
	"strings"

	web3 "github.com/boolw/go-web3"
	"github.com/boolw/go-web3/abi"
	"math/big"
)

func test1() {
	typ := abi.MustNewType("tuple(address a, uint256 b)")

	type Obj struct {
		A web3.Address
		B *big.Int
	}
	obj := &Obj{
		A: web3.Address{0x1},
		B: big.NewInt(1),
	}

	// Encode
	encoded, err := typ.Encode(obj)
	if err != nil {
		panic(err)
	}

	// Decode output into a map
	res, err := typ.Decode(encoded)
	if err != nil {
		panic(err)
	}

	// Decode into a struct
	var obj2 Obj
	if err := typ.DecodeStruct(encoded, &obj2); err != nil {
		panic(err)
	}

	fmt.Println(res)
	fmt.Println(obj)
}

func testRegisterDecode() {
	/**
	sol fn:
	  function register(
	       string calldata name,
	       address _owner,
	       uint256 duration,
	       address resolver,
	       bytes[] calldata data,
	       bool reverseRecord
	   )
	*/
	// sol 参数类型 与go 接收类型对应
	typ := abi.MustNewType("tuple(string Name, address Address, uint256 Expires, address Resolver, bytes[] CallData, bool Record)")
	type Obj struct {
		Address  web3.Address
		Expires  *big.Int
		Resolver web3.Address
		CallData []byte
		Record   bool
		Name     string
	}
	/*call eth contract function encoded:
	0x5901245692a2cf00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000008ffed4c8785ac75c6ece1dc96ebab8f07cd80ec50000000000000000000000000000000000000000000000000000000001e13380000000000000000000000000ed9bd04b1bb87abe2eff583a977514940c95699c000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000006646a616e676f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
	*/
	// origin https://filfox.info/zh/message/bafy2bzacedeplphrnphagltbfwfuyu7wipxabywmxbfer37p5qahnpvuszy4i
	//str := "0x00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000008ffed4c8785ac75c6ece1dc96ebab8f07cd80ec50000000000000000000000000000000000000000000000000000000001e13380000000000000000000000000ed9bd04b1bb87abe2eff583a977514940c95699c000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000006646a616e676f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
	//str := "0x00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000db3b7fab33b53e952e347408719ab8e7349b1d670000000000000000000000000000000000000000000000000000000001e13380000000000000000000000000ed9bd04b1bb87abe2eff583a977514940c95699c000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000006666d746d627300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
	//str := "00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000053456c300289b1502d64ae94679e7323c836d5a20000000000000000000000000000000000000000000000000000000005a39a80000000000000000000000000ed9bd04b1bb87abe2eff583a977514940c95699c00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000862696c6962696c690000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
	//str := "00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000060fed700a92dd18f08125795209fe0095bae749c0000000000000000000000000000000000000000000000000000000001e13380000000000000000000000000ed9bd04b1bb87abe2eff583a977514940c95699c000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000004616c6578000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
	str := "00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000053456c300289b1502d64ae94679e7323c836d5a20000000000000000000000000000000000000000000000000000000001e13380000000000000000000000000ed9bd04b1bb87abe2eff583a977514940c95699c0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000096a757374696e73756e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
	encoded := decodeHex(str)
	// Decode into a struct
	var obj2 Obj
	if err := typ.DecodeStruct(encoded, &obj2); err != nil {
		panic(err)
	}
	fmt.Println(obj2)
	fmt.Println(obj2.Name)
}

func testRegisterEventDecode() {
	typ := abi.MustNewType("tuple(string a,bytes32 b,address c,uint256 d,uint256 e,uint256 f)")
	type Obj struct {
		A string
		B []byte
		C web3.Address
		D *big.Int
		E *big.Int
		F *big.Int
	}
	// origin https://filfox.info/zh/message/bafy2bzacedeplphrnphagltbfwfuyu7wipxabywmxbfer37p5qahnpvuszy4i

	str := "0x00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000008ffed4c8785ac75c6ece1dc96ebab8f07cd80ec50000000000000000000000000000000000000000000000000000000001e13380000000000000000000000000ed9bd04b1bb87abe2eff583a977514940c95699c000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000006646a616e676f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
	encoded := decodeHex(str)
	// Decode into a struct
	var obj2 Obj
	if err := typ.DecodeStruct(encoded, &obj2); err != nil {
		panic(err)
	}
	fmt.Println(obj2)
}

func decodeHex(str string) []byte {
	if strings.HasPrefix(str, "0x") {
		str = str[2:]
	}
	buf, err := hex.DecodeString(str)
	if err != nil {
		panic(fmt.Errorf("could not decode hex: %v", err))
	}
	return buf
}
func main() {
	//testRegisterEventDecode()

	testRegisterDecode()
}
